import os
import json
import uuid
import logging
import asyncio
import requests
import time
import hashlib
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from aiogram.types.web_app_info import WebAppInfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7665197621:AAFWLa0ljKEelnsjbioIeyqXUHfP3X0JOkk"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 1621625897

# –ü—É—Ç—å –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
WEBAPP_URL = "https://kdebugada.github.io/tg-mini-app/"  # URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# TON –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TON_WALLET_ADDRESS = "EQBIhPuWmjT7fP-VomuTWseE8JNWv2q7QYfsVQ1IZwnMk8wL"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à TON-–∫–æ—à–µ–ª–µ–∫
TON_TESTNET = False  # True –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏, False –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∏
TON_EXPLORER_API = "https://toncenter.com/api/v2/getTransactions"
TON_API_KEY = ""  # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å API –∫–ª—é—á –¥–ª—è TON Center

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TON-–ø–ª–∞—Ç–µ–∂–µ–π
ton_payments = {}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö
TICKET_TYPES = {
    "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": {
        "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏–ª–µ—Ç",
        "description": "–ë–∞–∑–æ–≤—ã–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "price": 1,
        "price_ton": 0.5,  # –¶–µ–Ω–∞ –≤ TON
        "photo_url": "./foto/loto_glav_menu.jpg"
    },
    "—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π": {
        "name": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –±–∏–ª–µ—Ç",
        "description": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "price": 10,
        "price_ton": 5,  # –¶–µ–Ω–∞ –≤ TON
        "photo_url": "./foto/loto_glav_menu.jpg"
    },
    "–∑–æ–ª–æ—Ç–æ–π": {
        "name": "–ó–æ–ª–æ—Ç–æ–π –±–∏–ª–µ—Ç",
        "description": "–ó–æ–ª–æ—Ç–æ–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "price": 50,
        "price_ton": 25,  # –¶–µ–Ω–∞ –≤ TON
        "photo_url": "./foto/loto_glav_menu.jpg"
    },
    "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π": {
        "name": "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –±–∏–ª–µ—Ç",
        "description": "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "price": 100,
        "price_ton": 50,  # –¶–µ–Ω–∞ –≤ TON
        "photo_url": "./foto/loto_glav_menu.jpg"
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–∞ TON
def generate_ton_payment_id(user_id, ticket_type, amount):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ TON."""
    timestamp = int(time.time())
    unique_string = f"{user_id}_{ticket_type}_{amount}_{timestamp}_{uuid.uuid4()}"
    return hashlib.md5(unique_string.encode()).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ TON
async def check_ton_payment(payment_id, wallet_address, expected_amount):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–ª–∞—Ç–µ–∂ –≤ TON."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
        params = {
            'address': wallet_address,
            'limit': 10  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        }
        
        if TON_API_KEY:
            params['api_key'] = TON_API_KEY
            
        response = requests.get(TON_EXPLORER_API, params=params)
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TON API: {response.status_code}, {response.text}")
            return False
            
        transactions = response.json().get('result', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—à–µ–º—É –ø–ª–∞—Ç–µ–∂—É
        for tx in transactions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å payment_id)
            message = tx.get('message', '')
            if payment_id in message:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
                amount = tx.get('amount', 0) / 10**9  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–∞–Ω–æ–¢–û–ù –≤ TON
                if amount >= expected_amount:
                    logger.info(f"–ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ TON: {payment_id}, —Å—É–º–º–∞: {amount}")
                    return True
                    
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ TON: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π TON
async def check_pending_ton_payments():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ TON."""
    while True:
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
            payments_to_check = ton_payments.copy()
            
            for payment_id, payment_info in payments_to_check.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è
                current_time = time.time()
                if current_time - payment_info['timestamp'] > 3600:  # 1 —á–∞—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
                    logger.info(f"–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ TON: {payment_id}")
                    del ton_payments[payment_id]
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment_confirmed = await check_ton_payment(
                    payment_id, 
                    TON_WALLET_ADDRESS, 
                    payment_info['amount']
                )
                
                if payment_confirmed:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                    user_id = payment_info['user_id']
                    tickets = payment_info['tickets']
                    ticket_type = payment_info['ticket_type']
                    amount = payment_info['amount']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    confirmation_message = f"‚úÖ –ü–ª–∞—Ç–µ–∂ –≤ TON —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                    confirmation_message += f"üí∞ –°—É–º–º–∞: {amount} TON\n"
                    confirmation_message += f"üé´ –¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type.capitalize()}\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–∞—Ö
                    confirmation_message += "–í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n\n"
                    for i, ticket in enumerate(tickets):
                        confirmation_message += f"–ë–∏–ª–µ—Ç {i + 1}: {', '.join(map(str, sorted(ticket['numbers'])))}\n"
                    
                    await bot.send_message(user_id, confirmation_message)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    admin_message = f"üíµ –ù–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê TON!\n\n"
                    admin_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment_info['user_name']}\n"
                    admin_message += f"üÜî ID: {user_id}\n"
                    admin_message += f"üí∞ –°—É–º–º–∞: {amount} TON\n"
                    admin_message += f"üé´ –¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type.capitalize()}\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–∞—Ö
                    admin_message += "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n\n"
                    for i, ticket in enumerate(tickets):
                        admin_message += f"–ë–∏–ª–µ—Ç {i + 1}: {', '.join(map(str, sorted(ticket['numbers'])))}\n"
                    
                    try:
                        await bot.send_message(ADMIN_ID, admin_message)
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
                    
                    # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
                    del ton_payments[payment_id]
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_pending_ton_payments: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç–µ—Ä–µ—é",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]])
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ—é! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /terms
@dp.message(Command("terms"))
async def cmd_terms(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    await message.answer(
        "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏:\n\n"
        "1. –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.\n"
        "2. –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –≤ Telegram Stars.\n"
        "3. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏.\n"
        "4. –í—ã–∏–≥—Ä—ã—à–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.\n"
        "5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support
@dp.message(Command("support"))
async def cmd_support(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."""
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
        "Email: support@example.com\n"
        "Telegram: @support_username"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /paysupport
@dp.message(Command("paysupport"))
async def cmd_paysupport(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã."""
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. "
        "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tickets
@dp.message(Command("tickets"))
async def cmd_tickets(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö."""
    ticket_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –±–∏–ª–µ—Ç–æ–≤:\n\n"
    
    for ticket_type, info in TICKET_TYPES.items():
        ticket_message += f"üé´ {info['name']} - {info['price']} Stars\n"
        ticket_message += f"   {info['description']}\n\n"
    
    await message.answer(ticket_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message(F.web_app_data)
async def web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {message.web_app_data.data}")
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        if data.get('action') == 'create_invoice':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
            tickets = data.get('tickets', [])
            ticket_type = data.get('ticketType', '').lower()
            total_price = data.get('totalPrice', 0)
            payment_method = data.get('paymentMethod', 'stars')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Stars
            
            if not tickets:
                await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –±–∏–ª–µ—Ç—ã.")
                return
            
            if ticket_type not in TICKET_TYPES:
                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞.")
                return
            
            ticket_info = TICKET_TYPES[ticket_type]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            if payment_method == 'ton':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –≤ TON
                price_ton = ticket_info['price_ton'] * len(tickets)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
                payment_id = generate_ton_payment_id(user_id, ticket_type, price_ton)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                ton_payments[payment_id] = {
                    'user_id': user_id,
                    'user_name': f"{message.from_user.full_name} (@{message.from_user.username})",
                    'ticket_type': ticket_type,
                    'amount': price_ton,
                    'tickets': tickets,
                    'timestamp': time.time()
                }
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
                payment_instructions = f"üí∞ –î–ª—è –æ–ø–ª–∞—Ç—ã –≤ TON –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {price_ton} TON –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
                payment_instructions += f"`{TON_WALLET_ADDRESS}`\n\n"
                payment_instructions += f"‚ö†Ô∏è –í–ê–ñ–ù–û! –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:\n\n"
                payment_instructions += f"`{payment_id}`\n\n"
                payment_instructions += "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-5 –º–∏–Ω—É—Ç)."
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ ID –ø–ª–∞—Ç–µ–∂–∞
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å TON", callback_data=f"copy_ton_address_{payment_id}")],
                    [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID –ø–ª–∞—Ç–µ–∂–∞", callback_data=f"copy_payment_id_{payment_id}")]
                ])
                
                await message.answer(payment_instructions, reply_markup=keyboard, parse_mode="Markdown")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                try:
                    await bot.send_message(
                        ADMIN_ID,
                        f"üîî –ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –û–ü–õ–ê–¢–£ TON!\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                        f"üÜî ID: {user_id}\n"
                        f"üí∞ –°—É–º–º–∞: {price_ton} TON\n"
                        f"üé´ –¢–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type.capitalize()}\n"
                        f"üßæ ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
                
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stars
                price = total_price
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã
                expected_total = ticket_info['price'] * len(tickets)
                if price != expected_total:
                    logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã: –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_total}, –ø–æ–ª—É—á–µ–Ω–æ {price}")
                    price = expected_total
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                price_in_min_units = price * 100  # 1 Stars = 100 (–≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö)
                
                logger.info(f"–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ —Å—É–º–º—É {price_in_min_units} XTR –¥–ª—è –±–∏–ª–µ—Ç–æ–≤ —Ç–∏–ø–∞ {ticket_type}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö
                if user_id not in user_data:
                    user_data[user_id] = {}
                
                if 'pending_tickets' not in user_data[user_id]:
                    user_data[user_id]['pending_tickets'] = {}
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤
                invoice_payload = f"lottery_ticket_{ticket_type}_{uuid.uuid4()}"
                user_data[user_id]['pending_tickets'][invoice_payload] = tickets
                
                # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ Stars Payment API
                try:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞: {ticket_info}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL —Ñ–æ—Ç–æ
                    photo_url = ticket_info.get('photo_url', "")
                    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è, –¥–µ–ª–∞–µ–º –µ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π
                    if photo_url and not photo_url.startswith(('http://', 'https://')):
                        photo_url = f"{WEBAPP_URL}{photo_url.lstrip('./')}"
                        photo_url = "https://kdebugada.github.io/tg-mini-app/foto/loto_glav_menu.jpg"  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π URL
                    
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º URL —Ñ–æ—Ç–æ: {photo_url}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞
                    await message.answer(f"–§–æ—Ä–º–∏—Ä—É—é —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É {len(tickets)} –±–∏–ª–µ—Ç–æ–≤ —Ç–∏–ø–∞ '{ticket_type}' –∑–∞ {price} Stars...")
                    
                    # –ü—Ä—è–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await message.answer(f"DEBUG INFO: –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} Stars, –¢–∏–ø: {ticket_type}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(tickets)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
                    if not TOKEN:
                        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                        await message.answer("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                        return
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã –∏ —Å—É–º–º—ã
                        if price_in_min_units <= 0:
                            logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å—á–µ—Ç–∞: {price_in_min_units}")
                            await message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç—ã –∑–∞–Ω–æ–≤–æ.")
                            return
                        
                        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                        invoice_message = await bot.send_invoice(
                            chat_id=message.chat.id,
                            title=f"{ticket_info['name']} ({len(tickets)} —à—Ç.)",
                            description=f"–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã: {ticket_info['description']}",
                            payload=invoice_payload,
                            provider_token="",  # –î–ª—è Stars –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
                            currency="XTR",
                            prices=[LabeledPrice(label=f"{ticket_info['name']} x{len(tickets)}", amount=int(price_in_min_units))],
                            protect_content=True
                        )
                        
                        logger.info(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç —Å payload: {invoice_payload}, message_id: {invoice_message.message_id}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö
                        selected_numbers_message = data.get('selectedNumbersMessage', '')
                        if selected_numbers_message:
                            await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑:\n\n{selected_numbers_message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –≤ —Å—á–µ—Ç–µ –≤—ã—à–µ.")
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        await message.answer("–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω! –ï—Å–ª–∏ –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å', –æ–±–Ω–æ–≤–∏—Ç–µ —á–∞—Ç (–ø–æ—Ç—è–Ω–∏—Ç–µ —ç–∫—Ä–∞–Ω –≤–Ω–∏–∑).")
                    
                    except Exception as send_invoice_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ invoice: {send_invoice_error}", exc_info=True)
                        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(send_invoice_error)}")
                        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
                    
                except Exception as e:
                    logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ Stars: {e}", exc_info=True)
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    try:
                        await bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n–û—à–∏–±–∫–∞: {str(e)}")
                    except Exception as admin_msg_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_msg_error}")
        
        elif data.get('action') == 'check_ton_payment':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ TON
            payment_id = data.get('payment_id')
            
            if payment_id in ton_payments:
                payment_info = ton_payments[payment_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment_confirmed = await check_ton_payment(
                    payment_id, 
                    TON_WALLET_ADDRESS, 
                    payment_info['amount']
                )
                
                if payment_confirmed:
                    await message.answer("‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –≤ TON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ë–∏–ª–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω—ã.")
                else:
                    await message.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.")
            else:
                await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫ –∏–ª–∏ –±—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞.")
                
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
            await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
    
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
        await message.answer("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è TON-–∞–¥—Ä–µ—Å–∞ –∏ ID –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query(lambda c: c.data.startswith('copy_ton_address_') or c.data.startswith('copy_payment_id_'))
async def process_copy_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è TON-–∞–¥—Ä–µ—Å–∞ –∏ ID –ø–ª–∞—Ç–µ–∂–∞."""
    try:
        if callback_query.data.startswith('copy_ton_address_'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å TON-–∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await bot.send_message(callback_query.from_user.id, f"`{TON_WALLET_ADDRESS}`", parse_mode="Markdown")
            await callback_query.answer("–ê–¥—Ä–µ—Å TON —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
        elif callback_query.data.startswith('copy_payment_id_'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
            payment_id = callback_query.data.replace('copy_payment_id_', '')
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await bot.send_message(callback_query.from_user.id, f"`{payment_id}`", parse_mode="Markdown")
            await callback_query.answer("ID –ø–ª–∞—Ç–µ–∂–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π Stars."""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω pre-checkout –∑–∞–ø—Ä–æ—Å: {pre_checkout_query}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–∂–∏–¥–∞—é—â–∏–µ –±–∏–ª–µ—Ç—ã
        user_id = pre_checkout_query.from_user.id
        payload = pre_checkout_query.invoice_payload
        
        if (user_id in user_data and 
            'pending_tickets' in user_data[user_id] and
            payload in user_data[user_id]['pending_tickets']):
            
            # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
            logger.info(f"Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {pre_checkout_query.id}")
        else:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: {payload} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id, 
                ok=False, 
                error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre-checkout: {e}")
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id, 
            ok=False, 
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ Stars."""
    try:
        payment = message.successful_payment
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {payment}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        payload = payment.invoice_payload
        user_id = message.from_user.id
        total_amount = payment.total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        pending_tickets = None
        if user_id in user_data and 'pending_tickets' in user_data[user_id]:
            pending_tickets = user_data[user_id]['pending_tickets'].get(payload)
        
        if pending_tickets:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏
            confirmation_message = f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
            confirmation_message += f"üí∞ –°—É–º–º–∞: {total_amount} Stars\n"
            confirmation_message += f"üé´ –¢–∏–ø –±–∏–ª–µ—Ç–∞: {payload.split('_')[2].capitalize()}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–∞—Ö
            confirmation_message += "–í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n\n"
            for i, ticket in enumerate(pending_tickets):
                confirmation_message += f"–ë–∏–ª–µ—Ç {i + 1}: {', '.join(map(str, sorted(ticket['numbers'])))}\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(confirmation_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_message = f"üíµ –ù–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê STARS!\n\n"
            admin_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
            admin_message += f"üÜî ID: {user_id}\n"
            admin_message += f"üí∞ –°—É–º–º–∞: {total_amount} Stars\n"
            admin_message += f"üé´ –¢–∏–ø –±–∏–ª–µ—Ç–∞: {payload.split('_')[2].capitalize()}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–∞—Ö
            admin_message += "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n\n"
            for i, ticket in enumerate(pending_tickets):
                admin_message += f"–ë–∏–ª–µ—Ç {i + 1}: {', '.join(map(str, sorted(ticket['numbers'])))}\n"
            
            try:
                await bot.send_message(ADMIN_ID, admin_message)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            if payload in user_data[user_id]['pending_tickets']:
                del user_data[user_id]['pending_tickets'][payload]
                
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–∞—Ö –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {total_amount} Stars —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–∫—É–ø–∫—É!"
            )
            
            # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                await bot.send_message(
                    ADMIN_ID,
                    f"üíµ –ù–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê STARS!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                    f"üÜî ID: {user_id}\n"
                    f"üí∞ –°—É–º–º–∞: {total_amount} Stars\n"
                    f"üßæ Payload: {payload}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.error()
async def error_handler(update, exception):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {exception}")
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π TON
    asyncio.create_task(check_pending_ton_payments())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())