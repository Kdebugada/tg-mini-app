import os
import json
import uuid
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, LabeledPrice
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, PreCheckoutQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7665197621:AAFWLa0ljKEelnsjbioIeyqXUHfP3X0JOkk"

# –ü—É—Ç—å –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
WEBAPP_URL = "https://kdebugada.github.io/tg-mini-app/"  # URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö
TICKET_TYPES = {
    "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": {
        "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏–ª–µ—Ç",
        "description": "–ë–∞–∑–æ–≤—ã–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç —Å –æ–±—ã—á–Ω—ã–º —à–∞–Ω—Å–æ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à",
        "price": 1,
        "photo_url": "https://example.com/standard_ticket.jpg"
    },
    "—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π": {
        "name": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –±–∏–ª–µ—Ç",
        "description": "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à",
        "price": 10,
        "photo_url": "https://example.com/silver_ticket.jpg"
    },
    "–∑–æ–ª–æ—Ç–æ–π": {
        "name": "–ó–æ–ª–æ—Ç–æ–π –±–∏–ª–µ—Ç",
        "description": "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç —Å –≤—ã—Å–æ–∫–∏–º —à–∞–Ω—Å–æ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à",
        "price": 50,
        "photo_url": "https://example.com/gold_ticket.jpg"
    },
    "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π": {
        "name": "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –±–∏–ª–µ—Ç",
        "description": "–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —à–∞–Ω—Å–æ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à",
        "price": 100,
        "photo_url": "https://example.com/platinum_ticket.jpg"
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç–µ—Ä–µ—é", web_app=WebAppInfo(url=WEBAPP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /terms
async def terms(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    await update.message.reply_text(
        "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏:\n\n"
        "1. –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.\n"
        "2. –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –≤ Telegram Stars.\n"
        "3. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏.\n"
        "4. –í—ã–∏–≥—Ä—ã—à–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.\n"
        "5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support
async def support(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."""
    await update.message.reply_text(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
        "Email: support@example.com\n"
        "Telegram: @support_username"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /paysupport
async def paysupport(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã."""
    await update.message.reply_text(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. "
        "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tickets
async def tickets(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö."""
    message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –±–∏–ª–µ—Ç–æ–≤:\n\n"
    
    for ticket_type, info in TICKET_TYPES.items():
        message += f"üé´ {info['name']} - {info['price']} Stars\n"
        message += f"   {info['description']}\n\n"
    
    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def web_app_data(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {update.message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if not hasattr(update.message, 'web_app_data'):
            logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        data = json.loads(update.message.web_app_data.data)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {data}")
        
        if data.get('action') == 'create_stars_invoice':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
            price = int(data.get('price', 1))
            ticket_type = data.get('ticketType', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π').lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞
            if ticket_type not in TICKET_TYPES:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}")
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞ {ticket_type}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
            ticket_info = TICKET_TYPES[ticket_type]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–Ω–∞
            if price != ticket_info['price']:
                logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã: –æ–∂–∏–¥–∞–µ—Ç—Å—è {ticket_info['price']}, –ø–æ–ª—É—á–µ–Ω–æ {price}")
                price = ticket_info['price']
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
            price_in_min_units = price * 100  # 1 Stars = 100 (–≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö)
            
            logger.info(f"–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ —Å—É–º–º—É {price_in_min_units} XTR –¥–ª—è –±–∏–ª–µ—Ç–∞ —Ç–∏–ø–∞ {ticket_type}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ Bot API
            try:
                invoice = await context.bot.send_invoice(
                    chat_id=update.effective_chat.id,
                    title=ticket_info['name'],
                    description=ticket_info['description'],
                    payload=f"lottery_ticket_{ticket_type}_{uuid.uuid4()}",
                    provider_token="",  # –î–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
                    currency="XTR",  # XTR - –∫–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Telegram Stars
                    prices=[LabeledPrice(label=ticket_info['name'], amount=price_in_min_units)],
                    start_parameter=f"lottery_ticket_{ticket_type}",  # –î–ª—è deep linking
                    photo_url=ticket_info['photo_url'],  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                    photo_width=512,
                    photo_height=512,
                    need_name=False,
                    need_phone_number=False,
                    need_email=False,
                    need_shipping_address=False,
                    is_flexible=False
                )
                
                logger.info(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç: {invoice}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {str(e)}")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
            await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤
async def pre_checkout_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å—ã."""
    query = update.pre_checkout_query
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏ —Ç.–¥.
    # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
    try:
        await query.answer(ok=True)
        logger.info(f"Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {query.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre-checkout: {e}")
        await query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
async def successful_payment(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏."""
    payment = update.message.successful_payment
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –±–∏–ª–µ—Ç–∞ –∏–∑ payload
    payload = payment.invoice_payload
    ticket_type = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–∏–ø –±–∏–ª–µ—Ç–∞ –∏–∑ payload
    if "_" in payload:
        parts = payload.split("_")
        if len(parts) >= 3 and parts[0] == "lottery" and parts[1] == "ticket":
            ticket_type = parts[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
    ticket_info = TICKET_TYPES.get(ticket_type, TICKET_TYPES["—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment_info = {
        "telegram_payment_charge_id": payment.telegram_payment_charge_id,
        "provider_payment_charge_id": payment.provider_payment_charge_id,
        "total_amount": payment.total_amount,
        "currency": payment.currency,
        "invoice_payload": payment.invoice_payload,
        "ticket_type": ticket_type
    }
    
    logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {payment_info}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à {ticket_info['name']} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.\n"
        f"–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤ —Å {'–ø–æ–≤—ã—à–µ–Ω–Ω—ã–º' if ticket_type != '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' else '–æ–±—ã—á–Ω—ã–º'} —à–∞–Ω—Å–æ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à.\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –±–∏–ª–µ—Ç–∞, –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("terms", terms))
    application.add_handler(CommandHandler("support", support))
    application.add_handler(CommandHandler("paysupport", paysupport))
    application.add_handler(CommandHandler("tickets", tickets))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()