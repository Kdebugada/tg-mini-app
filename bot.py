import os
import json
import uuid
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.types.web_app_info import WebAppInfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7665197621:AAFWLa0ljKEelnsjbioIeyqXUHfP3X0JOkk"

# –ü—É—Ç—å –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
WEBAPP_URL = "https://kdebugada.github.io/tg-mini-app/"  # URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö
TICKET_TYPES = {
    "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": {
        "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏–ª–µ—Ç",
        "description": "–ë–∞–∑–æ–≤—ã–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "price": 1,
        "photo_url": "./foto/loto_glav_menu.jpg"
    },
    "—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π": {
        "name": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –±–∏–ª–µ—Ç",
        "description": "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "price": 10,
        "photo_url": "./foto/loto_glav_menu.jpg"
    },
    "–∑–æ–ª–æ—Ç–æ–π": {
        "name": "–ó–æ–ª–æ—Ç–æ–π –±–∏–ª–µ—Ç",
        "description": "–ó–æ–ª–æ—Ç–æ–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "price": 50,
        "photo_url": "./foto/loto_glav_menu.jpg"
    },
    "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π": {
        "name": "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –±–∏–ª–µ—Ç",
        "description": "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç",
        "price": 100,
        "photo_url": "./foto/loto_glav_menu.jpg"
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç–µ—Ä–µ—é", web_app=WebAppInfo(url=WEBAPP_URL)))
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /terms
@dp.message_handler(Command("terms"))
async def cmd_terms(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    await message.answer(
        "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏:\n\n"
        "1. –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.\n"
        "2. –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –≤ Telegram Stars.\n"
        "3. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏.\n"
        "4. –í—ã–∏–≥—Ä—ã—à–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.\n"
        "5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support
@dp.message_handler(Command("support"))
async def cmd_support(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."""
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
        "Email: support@example.com\n"
        "Telegram: @support_username"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /paysupport
@dp.message_handler(Command("paysupport"))
async def cmd_paysupport(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã."""
    await message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. "
        "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tickets
@dp.message_handler(Command("tickets"))
async def cmd_tickets(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–∞—Ö."""
    ticket_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –±–∏–ª–µ—Ç–æ–≤:\n\n"
    
    for ticket_type, info in TICKET_TYPES.items():
        ticket_message += f"üé´ {info['name']} - {info['price']} Stars\n"
        ticket_message += f"   {info['description']}\n\n"
    
    await message.answer(ticket_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {message}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        data = json.loads(message.web_app_data.data)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {data}")
        
        if data.get('action') == 'open_number_selection':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤
            price = int(data.get('price', 1))
            ticket_type = data.get('ticketType', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')
            
            # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –Ω–æ–º–µ—Ä–æ–≤
            number_selection_url = f"{WEBAPP_URL}number_selection.html?type={ticket_type}&price={price}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–æ–≤
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(
                f"–í—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –¥–ª—è {ticket_type} –±–∏–ª–µ—Ç–∞", 
                web_app=WebAppInfo(url=number_selection_url)
            ))
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ 8 –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ {ticket_type} –±–∏–ª–µ—Ç–∞ (—Ü–µ–Ω–∞: {price} Stars):",
                reply_markup=keyboard
            )
        elif data.get('action') == 'create_stars_invoice':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            if 'tickets' in data:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–∏–ª–µ—Ç–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
                tickets = data.get('tickets', [])
                total_price = data.get('totalPrice', 0)
                
                if not tickets:
                    logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤")
                    await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –±–∏–ª–µ—Ç—ã")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—á–µ—Ç–∞
                ticket_descriptions = []
                for i, ticket in enumerate(tickets):
                    ticket_type = ticket.get('type', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')
                    numbers = ticket.get('numbers', [])
                    numbers_str = ', '.join(map(str, numbers))
                    ticket_descriptions.append(f"{i+1}. {ticket_type} –±–∏–ª–µ—Ç: {numbers_str}")
                
                description = "–ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:\n" + "\n".join(ticket_descriptions)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                price_in_min_units = total_price * 100  # 1 Stars = 100 (–≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö)
                
                logger.info(f"–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ —Å—É–º–º—É {price_in_min_units} XTR –¥–ª—è {len(tickets)} –±–∏–ª–µ—Ç–æ–≤")
                
                # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ Bot API
                try:
                    invoice_payload = f"lottery_tickets_{uuid.uuid4()}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if message.from_user.id not in user_data:
                        user_data[message.from_user.id] = {}
                    
                    if 'pending_tickets' not in user_data[message.from_user.id]:
                        user_data[message.from_user.id]['pending_tickets'] = {}
                    
                    user_data[message.from_user.id]['pending_tickets'][invoice_payload] = {
                        'tickets': tickets,
                        'total_price': total_price
                    }
                    
                    await bot.send_invoice(
                        chat_id=message.chat.id,
                        title=f"–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã ({len(tickets)} —à—Ç.)",
                        description=description,
                        payload=invoice_payload,
                        provider_token="",  # –î–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
                        currency="XTR",  # XTR - –∫–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Telegram Stars
                        prices=[
                            LabeledPrice(
                                label=f"–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã ({len(tickets)} —à—Ç.)", 
                                amount=price_in_min_units
                            )
                        ],
                        start_parameter="lottery_tickets",  # –î–ª—è deep linking
                        photo_url="./foto/loto_glav_menu.jpg",  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                        photo_width=512,
                        photo_height=512,
                        need_name=False,
                        need_phone_number=False,
                        need_email=False,
                        need_shipping_address=False,
                        is_flexible=False
                    )
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç —Å payload: {invoice_payload}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {str(e)}")
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
                price = int(data.get('price', 1))
                ticket_type = data.get('ticketType', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π').lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞
                if ticket_type not in TICKET_TYPES:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞: {ticket_type}")
                    await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∏–ª–µ—Ç–∞ {ticket_type}")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
                ticket_info = TICKET_TYPES[ticket_type]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–Ω–∞
                if price != ticket_info['price']:
                    logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã: –æ–∂–∏–¥–∞–µ—Ç—Å—è {ticket_info['price']}, –ø–æ–ª—É—á–µ–Ω–æ {price}")
                    price = ticket_info['price']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                price_in_min_units = price * 100  # 1 Stars = 100 (–≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö)
                
                logger.info(f"–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ —Å—É–º–º—É {price_in_min_units} XTR –¥–ª—è –±–∏–ª–µ—Ç–∞ —Ç–∏–ø–∞ {ticket_type}")
                
                # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ Bot API
                try:
                    invoice_payload = f"lottery_ticket_{ticket_type}_{uuid.uuid4()}"
                    
                    await bot.send_invoice(
                        chat_id=message.chat.id,
                        title=ticket_info['name'],
                        description=ticket_info['description'],
                        payload=invoice_payload,
                        provider_token="",  # –î–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
                        currency="XTR",  # XTR - –∫–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Telegram Stars
                        prices=[
                            LabeledPrice(
                                label=ticket_info['name'], 
                                amount=price_in_min_units
                            )
                        ],
                        start_parameter=f"lottery_ticket_{ticket_type}",  # –î–ª—è deep linking
                        photo_url=ticket_info['photo_url'],  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                        photo_width=512,
                        photo_height=512,
                        need_name=False,
                        need_phone_number=False,
                        need_email=False,
                        need_shipping_address=False,
                        is_flexible=False
                    )
                    
                    logger.info(f"–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç —Å payload: {invoice_payload}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {str(e)}")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
            await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.pre_checkout_query_handler()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å—ã."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏ —Ç.–¥.
    # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑
    try:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        logger.info(f"Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {pre_checkout_query.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre-checkout: {e}")
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id, 
            ok=False, 
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏."""
    payment = message.successful_payment
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–∞—Ö —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
    user_id = message.from_user.id
    pending_tickets = None
    
    if user_id in user_data and 'pending_tickets' in user_data[user_id]:
        pending_tickets = user_data[user_id]['pending_tickets'].get(payment.invoice_payload)
    
    if pending_tickets:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –±–∏–ª–µ—Ç–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        tickets = pending_tickets.get('tickets', [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        ticket_descriptions = []
        for i, ticket in enumerate(tickets):
            ticket_type = ticket.get('type', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')
            numbers = ticket.get('numbers', [])
            numbers_str = ', '.join(map(str, numbers))
            ticket_descriptions.append(f"{i+1}. {ticket_type} –±–∏–ª–µ—Ç: {numbers_str}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = {
            "telegram_payment_charge_id": payment.telegram_payment_charge_id,
            "provider_payment_charge_id": payment.provider_payment_charge_id,
            "total_amount": payment.total_amount,
            "currency": payment.currency,
            "invoice_payload": payment.invoice_payload,
            "tickets": tickets
        }
        
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ –±–∏–ª–µ—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏: {payment_info}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à–∏ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã ({len(tickets)} —à—Ç.) —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω—ã.\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(ticket_descriptions) + "\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if payment.invoice_payload in user_data[user_id]['pending_tickets']:
            del user_data[user_id]['pending_tickets'][payment.invoice_payload]
    else:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –±–∏–ª–µ—Ç–∞ –∏–∑ payload
        payload = payment.invoice_payload
        ticket_type = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–∏–ø –±–∏–ª–µ—Ç–∞ –∏–∑ payload
        if "_" in payload:
            parts = payload.split("_")
            if len(parts) >= 3 and parts[0] == "lottery" and parts[1] == "ticket":
                ticket_type = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
        ticket_info = TICKET_TYPES.get(ticket_type, TICKET_TYPES["—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = {
            "telegram_payment_charge_id": payment.telegram_payment_charge_id,
            "provider_payment_charge_id": payment.provider_payment_charge_id,
            "total_amount": payment.total_amount,
            "currency": payment.currency,
            "invoice_payload": payment.invoice_payload,
            "ticket_type": ticket_type
        }
        
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {payment_info}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à {ticket_info['name']} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –±–∏–ª–µ—Ç–∞, –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def error_handler(update, exception):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {exception}")
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)